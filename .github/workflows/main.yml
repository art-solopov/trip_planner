name: Main

on: push
    # branches: [ master, deploy, github-actions ]

env:
  PYTHON_VERSION: 3.10.5

jobs:
  requirements_txt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install poetry
      - name: Export requirements
        run: poetry export -o requirements.txt
      - name: Export dev requirements (for tests)
        run: poetry export --dev -o requirements.dev.txt
      - name: Store requirements.txt file
        uses: actions/upload-artifact@v4
        with:
          name: requirements.txt
          path: requirements.txt
      - name: Store requirements.dev.txt file
        uses: actions/upload-artifact@v4
        with:
          name: requirements.dev.txt
          path: requirements.dev.txt
  tests:
    runs-on: ubuntu-latest
    needs: [requirements_txt]
    env:
      POSTGRES_USER: trip_planner
      POSTGRES_PASSWORD: trip_planner
      POSTGRES_DB: trip_planner

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: requirements.dev.txt
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.dev.txt
      - run: pip install -r requirements.dev.txt
      - name: Tests
        run: python -m pytest
        env:
          TESTDB: ${{ format('postgresql://{0}:{1}@localhost/{2}', env.POSTGRES_USER, env.POSTGRES_PASSWORD, env.POSTGRES_DB) }}
    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432

  assets:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
    - uses: actions/checkout@v4
    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.1
        cache: yarn
    - run: yarn install --immutable --check-cache
    - name: build assets
      run: yarn node assets/scripts/build.js trip_planner/static/assets assets trip_planner/static/assets/manifest.json
    - name: Store compiled assets
      uses: actions/upload-artifact@v4
      with:
        name: assets
        path: trip_planner/static/assets

  favicons:
    runs-on: ubuntu-latest
    env:
      OUTDIR: favicons
      CMD: "inkscape trip_planner/static/favicon.svg"
    steps:
    - uses: actions/checkout@v4
    - name: Install Inkscape
      run: sudo apt-get update && sudo apt-get install inkscape
    - run: mkdir -p "$OUTDIR"
    - name: Favicon
      run: scripts/favicon_export
    - name: Apple icon
      run: >
        ${{ env.CMD }} -w 180 -o "$OUTDIR/apple-touch-icon.png"
    - name: Android icons
      run: >
        ${{ env.CMD }} -w 192 -o "$OUTDIR/icon-192.png" &&
        ${{ env.CMD }} -w 512 -o "$OUTDIR/icon-512.png"
    - uses: actions/upload-artifact@v4
      with:
        name: favicon.svg
        path: trip_planner/static/favicon.svg
    - uses: actions/upload-artifact@v4
      with:
        name: favicons
        path: ${{ env.OUTDIR }}
      

  docker:
    runs-on: ubuntu-latest
    needs: [requirements_txt, assets, tests, favicons]
    if: github.ref_type == 'tag' || github.ref_name == 'main' || github.ref_name == 'master' || github.ref_name == 'deploy' || github.ref_name == 'github-actions'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - uses: actions/download-artifact@v4
      with:
        name: assets
        path: trip_planner/static/assets
    - uses: actions/download-artifact@v4
      with:
        name: favicons
        path: trip_planner/static/favicons
    - uses: actions/download-artifact@v4
      with:
        name: favicon.svg
        path: trip_planner/static/favicon.svg
    - uses: actions/download-artifact@v4
      with:
        name: requirements.txt
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_LOGIN }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ format('{0}/trip_planner:{1}', secrets.DOCKERHUB_LOGIN, github.ref_name) }}
